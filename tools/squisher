#!/bin/bash
#
# Squish a CM otapackage for distribution
# cyanogen
#

. ${ANDROID_BUILD_TOP}/vendor/bam/tools/colors

OUT_TARGET_HOST=`uname -a | grep Darwin`
if [ -z "$OUT_TARGET_HOST" ]
then
   OUT_TARGET_HOST=linux-x86
   MD5=md5sum
   XARGS="xargs --max-args=1 --max-procs `grep 'processor' /proc/cpuinfo|wc -l`"
   SED=sed
else
   OUT_TARGET_HOST=darwin-x86
   MD5=md5
   XARGS="xargs -n 1 -P `sysctl hw.ncpu | awk '{print $2}'`"
   SED=gsed
fi

if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo -e ${red}"ERROR: $0 only works with a full build environment. $OUT should exist."${txtrst}
	exit 1
fi

if [ "$TARGET_BUILD_TYPE" = "debug" ]; then
    OTAPACKAGE=$OUT/${TARGET_PRODUCT}_debug-ota-$TARGET_BUILD_VARIANT.$USER.zip
elif [ "$TARGET_BUILD_VARIANT" = "userdebug" ]; then
    OTAPACKAGE=$OUT/$TARGET_PRODUCT-ota-eng.$USER.zip
else
    OTAPACKAGE=$OUT/$TARGET_PRODUCT-ota-$TARGET_BUILD_VARIANT.$USER.zip
fi
if [ ! -f "$OTAPACKAGE" ]; then
	echo -e ${red}"$OTAPACKAGE doesn't exist!"${txtrst};
	exit 1
fi

OPTICHARGER=$ANDROID_BUILD_TOP/vendor/bam/tools/opticharger
QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"

REPACK=$OUT/repack.d
echo -e ${bldcya}"Sanitizing environment..."${txtrst}
rm -rf $REPACK
mkdir -p $REPACK


# Unpack the otapackage and opticharge all apks
mkdir $REPACK/ota
(
cd $REPACK/ota
echo -e ${bldgrn}"Unpacking${txtrst}: ${grn}$OTAPACKAGE..."${txtrst}
unzip $QUIET $OTAPACKAGE
echo -e ""
cd $REPACK/ota/system/framework
$OPTICHARGER framework-res.apk
cd $REPACK/ota/system/app
find ./ -name \*.apk | $XARGS $OPTICHARGER
)

# Fix build.prop
$SED -i \
	-e '/ro\.kernel\.android\.checkjni/d' \
	-e '/ro\.build\.type/s/eng/user/' \
	$REPACK/ota/system/build.prop

# Delete BAM specific files
if [ -f $ANDROID_BUILD_TOP/vendor/bam/tools/squisher.rm ]; then
	for RM_FILE in `cat $ANDROID_BUILD_TOP/vendor/bam/tools/squisher.rm`; do
		rm -f $REPACK/ota/$RM_FILE
	done
fi

# Delete target product specific files
if [ -f $ANDROID_BUILD_TOP/vendor/bam/tools/$TARGET_PRODUCT-squisher.rm ]; then
	for RM_FILE in `cat $ANDROID_BUILD_TOP/vendor/bam/tools/$TARGET_PRODUCT-squisher.rm`; do
		rm -f $REPACK/ota/$RM_FILE
	done
fi

# Delete unnecessary binaries
( cd $REPACK/ota/system/bin; echo $DELETE_BINS | xargs rm -f; )

# No need for recovery
rm -rf $REPACK/ota/recovery

# Strip modules
[ -d $REPACK/ota/system/lib/modules ] && \
	find $REPACK/ota/system/lib/modules -name "*.ko" -print0 | xargs -0 arm-eabi-strip --strip-unneeded

# Determine what to name the new signed package
if [ -z "$CYANOGEN_NIGHTLY" ]; then
	BAMVERSION=`grep 'ro.bam-rom.version=' $REPACK/ota/system/build.prop | sed -e 's/ro.bam-rom.version=//g'`
	ABIGEN=`grep 'ro.product.cpu.abi=' $REPACK/ota/system/build.prop | sed -e 's/ro.product.cpu.abi=//g'`
	OUTFILE=$OUT/$BAMVERSION.zip
	echo -e ""; echo -e "${bldcya}B${bldcya}A${bldcya}M${bldcya}-VERSION${txtrst}:${cya} $BAMVERSION"${txtrst}; echo -e ""
else
	OUTFILE=$OUT/update-squished.zip
fi

# Pack it up and sign
echo -e ${grn}"Zipping package..."${txtrst}
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip . )
echo -e ${grn}"Signing package..."${txtrst}
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx1024m \
	-jar $OUTDIR/host/$OUT_TARGET_HOST/framework/signapk.jar \
	-w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
	$REPACK/update.zip $OUTFILE
echo -e ${grn}"Cleaning up..."${txtrst}
rm -rf $REPACK

# Create a md5 checksum image of the repacked package
(
img=`basename $OUTFILE`
cd `dirname $OUTFILE`
$MD5 $img >$img.md5sum
ZIPSIZE=`ls -lah $OUTFILE | awk '{ print $5}'`
echo -e ""; echo -e ${bldgrn}"Package complete:"${txtrst}
echo -e ${bldcya}"ZIP:${cya}  $img"${txtrst}
echo -e ${bldcya}"MD5: ${cya} `cat $img.md5sum | awk '{print $1}'`"${txtrst}
echo -e ${bldcya}"SIZE:${cya} $ZIPSIZE"${txtrst}
MD5VAL=`cat $img.md5sum  | awk '{ print $1 }'`
DEVICE=`echo -e $TARGET_PRODUCT | cut -d "_" -f 2`
)

exit 0
